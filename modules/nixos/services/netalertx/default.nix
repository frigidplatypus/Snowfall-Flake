{
  config,
  pkgs,
  lib,
  ...
}:

with lib;
with lib.frgd;
let
  cfg = config.frgd.services.netalertx;
in
{
  options.frgd.services.netalertx = with types; {
    enable = mkBoolOpt false "Whether or not to configure netalertx support.";

  };

  config = mkIf cfg.enable {
    virtualisation.podman = {
      enable = true;
      autoPrune.enable = true;
      dockerCompat = true;
      defaultNetwork.settings = {
        # Required for container networking to be able to use names.
        dns_enabled = true;
      };
    };

    # Enable container name DNS for non-default Podman networks.
    # https://github.com/NixOS/nixpkgs/issues/226365
    networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

    virtualisation.oci-containers.backend = "podman";

    # Containers
    virtualisation.oci-containers.containers."NetAlertX" = {
      image = "jokobsk/netalertx:latest";
      environment = {
        "TZ" = "America/Chicago";
      };
      volumes = [
        "/opt/netalertx/netalertx/config:/app/config:rw"
        "/opt/netalertx/netalertx/db:/app/db:rw"
      ];
      log-driver = "journald";
      extraOptions = [
        "--hostname=NetAlertX"
        "--network=host"
        "--privileged"
      ];
    };
    systemd.services."podman-NetAlertX" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
      };
      partOf = [
        "podman-compose-netalertx-root.target"
      ];
      wantedBy = [
        "podman-compose-netalertx-root.target"
      ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-netalertx-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };

  };
}
